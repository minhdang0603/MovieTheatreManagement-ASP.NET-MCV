// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int?>("ShowtimeId")
                        .HasColumnType("int")
                        .HasColumnName("showtime_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("reserved")
                        .HasColumnName("status");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("total_price");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__5DE3A5B10F6B8EDB");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("director_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("director_name");

                    b.HasKey("DirectorId")
                        .HasName("PK__Director__F5205E49FD2CE489");

                    b.ToTable("Director", (string)null);

                    b.HasData(
                        new
                        {
                            DirectorId = 1,
                            DirectorName = "Christopher Nolan"
                        },
                        new
                        {
                            DirectorId = 2,
                            DirectorName = "Quentin Tarantino"
                        },
                        new
                        {
                            DirectorId = 3,
                            DirectorName = "Steven Spielberg"
                        },
                        new
                        {
                            DirectorId = 4,
                            DirectorName = "Martin Scorsese"
                        },
                        new
                        {
                            DirectorId = 5,
                            DirectorName = "James Cameron"
                        });
                });

            modelBuilder.Entity("Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("genre_name");

                    b.HasKey("GenreId")
                        .HasName("PK__Genre__18428D420243091E");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Drama"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Horror"
                        },
                        new
                        {
                            GenreId = 5,
                            GenreName = "Science Fiction"
                        });
                });

            modelBuilder.Entity("Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("director_id");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("MovieId")
                        .HasName("PK__Movie__83CDF74908A55B8A");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("StatusId");

                    b.ToTable("Movie", (string)null);

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Description = "A mind-bending thriller.",
                            DirectorId = 1,
                            Duration = 148,
                            GenreId = 1,
                            ImageUrl = "",
                            ReleaseDate = new DateOnly(2010, 7, 16),
                            StatusId = 1,
                            Title = "Inception"
                        },
                        new
                        {
                            MovieId = 2,
                            Description = "A dark comedy crime film.",
                            DirectorId = 2,
                            Duration = 154,
                            GenreId = 2,
                            ImageUrl = "",
                            ReleaseDate = new DateOnly(1994, 10, 14),
                            StatusId = 3,
                            Title = "Pulp Fiction"
                        },
                        new
                        {
                            MovieId = 3,
                            Description = "Dinosaurs run wild in a theme park.",
                            DirectorId = 3,
                            Duration = 127,
                            GenreId = 5,
                            ImageUrl = "",
                            ReleaseDate = new DateOnly(1993, 6, 11),
                            StatusId = 3,
                            Title = "Jurassic Park"
                        });
                });

            modelBuilder.Entity("Models.MovieStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId")
                        .HasName("PK__MovieSta__3683B5310B495069");

                    b.ToTable("MovieStatus", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Now Showing"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Coming Soon"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Ended"
                        });
                });

            modelBuilder.Entity("Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("SeatsNo")
                        .HasColumnType("int")
                        .HasColumnName("seats_no");

                    b.HasKey("RoomId")
                        .HasName("PK__Room__19675A8A6C8EE502");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Name = "IMAX Theater",
                            SeatsNo = 100
                        },
                        new
                        {
                            RoomId = 2,
                            Name = "Dolby Atmos",
                            SeatsNo = 80
                        },
                        new
                        {
                            RoomId = 3,
                            Name = "Standard Hall",
                            SeatsNo = 120
                        });
                });

            modelBuilder.Entity("Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<int>("SeatColumn")
                        .HasColumnType("int")
                        .HasColumnName("seat_column");

                    b.Property<string>("SeatRow")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("seat_row");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("SeatId")
                        .HasName("PK__Seat__906DED9CEBDBBA0F");

                    b.HasIndex("RoomId");

                    b.HasIndex("TypeId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("Models.SeatType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int?>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<string>("TypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("PK__SeatType__2C0005989292213C");

                    b.ToTable("SeatType", (string)null);

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Price = 10,
                            TypeName = "Standard"
                        },
                        new
                        {
                            TypeId = 2,
                            Price = 15,
                            TypeName = "Premium"
                        },
                        new
                        {
                            TypeId = 3,
                            Price = 20,
                            TypeName = "VIP"
                        });
                });

            modelBuilder.Entity("Models.Showtime", b =>
                {
                    b.Property<int>("ShowtimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("showtime_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowtimeId"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.HasKey("ShowtimeId")
                        .HasName("PK__Showtime__A406B5188AE7C04E");

                    b.HasIndex("MovieId");

                    b.HasIndex("RoomId");

                    b.ToTable("Showtime", (string)null);
                });

            modelBuilder.Entity("Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__D596F96B76D72D6B");

                    b.HasIndex("BookingId");

                    b.HasIndex("SeatId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Models.Booking", b =>
                {
                    b.HasOne("Models.Showtime", "Showtime")
                        .WithMany("Bookings")
                        .HasForeignKey("ShowtimeId")
                        .HasConstraintName("FK__Booking__showtim__4F7CD00D");

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("Models.Movie", b =>
                {
                    b.HasOne("Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("FK__Movie__director___3E52440B");

                    b.HasOne("Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK__Movie__genre_id__3D5E1FD2");

                    b.HasOne("Models.MovieStatus", "Status")
                        .WithMany("Movies")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__Movie__status_id__3F466844");

                    b.Navigation("Director");

                    b.Navigation("Genre");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Models.Seat", b =>
                {
                    b.HasOne("Models.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__Seat__room_id__49C3F6B7");

                    b.HasOne("Models.SeatType", "Type")
                        .WithMany("Seats")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK__Seat__type_id__4AB81AF0");

                    b.Navigation("Room");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Models.Showtime", b =>
                {
                    b.HasOne("Models.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Showtime__movie___440B1D61");

                    b.HasOne("Models.Room", "Room")
                        .WithMany("Showtimes")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__Showtime__room_i__44FF419A");

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Models.Ticket", b =>
                {
                    b.HasOne("Models.Booking", "Booking")
                        .WithMany("Tickets")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Ticket__booking___534D60F1");

                    b.HasOne("Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK__Ticket__seat_id__52593CB8");

                    b.Navigation("Booking");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Models.Booking", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Models.Movie", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("Models.MovieStatus", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Models.Room", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("Models.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Models.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Models.Showtime", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
